import{_ as e,o as a,c as s,Q as n}from"./chunks/framework.8f83280a.js";const g=JSON.parse('{"title":"Ocean 一键安装脚本 v3.0.0","description":"","frontmatter":{},"headers":[],"relativePath":"zh/docs/install/bash.md","filePath":"zh/docs/install/bash.md","lastUpdated":1695023509000}'),o={name:"zh/docs/install/bash.md"},l=n(`<h1 id="ocean-一键安装脚本-v3-0-0" tabindex="-1">Ocean 一键安装脚本 v3.0.0 <a class="header-anchor" href="#ocean-一键安装脚本-v3-0-0" aria-label="Permalink to &quot;Ocean 一键安装脚本 v3.0.0&quot;">​</a></h1><p>一键安装 Ocean！</p><p>需要 ubuntu 系统。</p><p>下面的链接是<strong>更新</strong> Ocean 的脚本：</p><p><a href="https://github.com/joinocean/bash-install/blob/a096e874f93d493aa68975a31be9ce12d644e767/README.en.md" target="_blank" rel="noreferrer">For v12</a></p><h2 id="需要准备" tabindex="-1">需要准备... <a class="header-anchor" href="#需要准备" aria-label="Permalink to &quot;需要准备...&quot;">​</a></h2><ol><li>一个域名</li><li>ubuntu 系统的服务器（推荐18.04及以上的 LTS 版本）</li><li>一个 Cloudflare 帐户 (如果使用其 CDN)</li></ol><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>请注意，一旦 Ocean 开始运行，不要更改域名和服务器的主机名。</p></div><h2 id="配置-cloudflare" tabindex="-1">配置 Cloudflare <a class="header-anchor" href="#配置-cloudflare" aria-label="Permalink to &quot;配置 Cloudflare&quot;">​</a></h2><p>如果 DNS 提供商为 Cloudflare，请在安装之前完成如下设定：</p><ul><li>设置域名解析 IP 地址。</li><li>在 SSL/TLS 设置界面, 将加密模式设置为 &quot;完全&quot;。</li></ul><p>请确保域名已解析到该服务器上，再进行安装。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="_1-连接到服务器-ssh" tabindex="-1">1. 连接到服务器 SSH <a class="header-anchor" href="#_1-连接到服务器-ssh" aria-label="Permalink to &quot;1. 连接到服务器 SSH&quot;">​</a></h3><p>通过 SSH 连接到服务器。 如果系统有图形化界面，打开终端（terminal）。</p><h3 id="_2-更新软件包" tabindex="-1">2. 更新软件包 <a class="header-anchor" href="#_2-更新软件包" aria-label="Permalink to &quot;2. 更新软件包&quot;">​</a></h3><p>确保所有软件为最新版本。 输入以下命令来更新，更新完成后将重启服务器。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">sudo apt update; sudo apt full-upgrade -y; sudo reboot</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">sudo apt update; sudo apt full-upgrade -y; sudo reboot</span></span></code></pre></div><h3 id="_3-下载脚本" tabindex="-1">3. 下载脚本 <a class="header-anchor" href="#_3-下载脚本" aria-label="Permalink to &quot;3. 下载脚本&quot;">​</a></h3><p>重新连接到服务器，输入以下命令来下载和运行脚本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">wget https://raw.githubusercontent.com/joinocean/bash-install/main/ubuntu.sh -O ubuntu.sh; sudo bash ubuntu.sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">wget https://raw.githubusercontent.com/joinocean/bash-install/main/ubuntu.sh -O ubuntu.sh; sudo bash ubuntu.sh</span></span></code></pre></div><p>之后，按照提示输入内容。</p><h3 id="_4-更新-ocean" tabindex="-1">4. 更新 Ocean <a class="header-anchor" href="#_4-更新-ocean" aria-label="Permalink to &quot;4. 更新  Ocean&quot;">​</a></h3><p>更新 Ocean 也是有一个脚本的呢。</p><p>请注意，更新 Ocean 的脚本不会升级运行环境。 对于脚本的更新内容，另请参阅 “更新日志” (日文) 与 <a href="https://github.com/joinocean/bash-install/releases" target="_blank" rel="noreferrer">GitHub release 列表 (英语)</a> 。</p><p>首先，输入以下命令来下载脚本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">wget https://raw.githubusercontent.com/joinocean/bash-install/main/update.ubuntu.sh -O update.sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">wget https://raw.githubusercontent.com/joinocean/bash-install/main/update.ubuntu.sh -O update.sh</span></span></code></pre></div><p>输入以下命令来运行脚本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">sudo bash update.sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">sudo bash update.sh</span></span></code></pre></div><ul><li>使用 <strong>systemd</strong> 的小伙伴, 添加 <code>-r</code> 可以更新并重启系统。</li><li>使用 <strong>docker</strong> 的小伙伴, 可以特定软件包版本 repository:tag 来更新。</li></ul><h2 id="测试通过的环境" tabindex="-1">测试通过的环境 <a class="header-anchor" href="#测试通过的环境" aria-label="Permalink to &quot;测试通过的环境&quot;">​</a></h2><h3 id="oracle-cloud-服务器" tabindex="-1">Oracle Cloud 服务器 <a class="header-anchor" href="#oracle-cloud-服务器" aria-label="Permalink to &quot;Oracle Cloud 服务器&quot;">​</a></h3><p>该脚本在以下的甲骨文的免费服务器中运行良好～</p><ul><li>VM.Standard.E2.1.Micro (AMD)</li><li>VM.Standard.A1.Flex (ARM) [1OCPU RAM6GB 或更高规格]</li></ul><p>或许可以试一下 iptables，如果出现问题的话。</p><h2 id="欢迎提出-issue-和-pull-request" tabindex="-1">欢迎提出 issue 和 pull request！ <a class="header-anchor" href="#欢迎提出-issue-和-pull-request" aria-label="Permalink to &quot;欢迎提出 issue 和 pull request！&quot;">​</a></h2><p>如果在上述环境下不起作用，可能是bug。如果您能描述安装时的环境并使用 GitHub 的 Issue 来报告问题，我们会非常感谢的！</p><p>如果问题出在不是上述所提及的运行环境，处理起来会有一点点困难，但是如果您告诉我们更多有关情况，我们也许可以解决。</p><p>欢迎小伙伴们提出任何意见和建议。</p><h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><p>下面为安装时可能遇到的问题。</p><h2 id="选择-systemd-还是-docker-呢" tabindex="-1">选择 Systemd 还是 Docker 呢? <a class="header-anchor" href="#选择-systemd-还是-docker-呢" aria-label="Permalink to &quot;选择 Systemd 还是 Docker 呢?&quot;">​</a></h2><p>如果选择 Dcoker 版本（注意不是 docker-compose）的 Ocean，宿主机中仍须安装 Redis 和 Postgres。推荐选择 docker-compose 方式安装 Ocean，该方式将 Redis，Postgres 和 Ocean 都安装在了 docker 中，另请参阅 利用 docker-compose 安装 Ocean： 另外，这里也有一片文章讲述了利用 docker-compose 功能： <a href="https://gist.github.com/mamemomonga/5549bb69cad8e5618e5527593d4890e0" target="_blank" rel="noreferrer">mamemononga 的这篇文章被推荐用于如何使用 docker-compose 运行所有功能。</a></p><p>如果使用 Docker Hub 镜像，则不需要编译 Ocean。 如果想对Ocean进行高度自定义（例如fork到本地修改），我们推荐选择编译安装 Ocean（systemd 方式），而不是docker。</p><p>三种方式的推荐度（从大到小排列）：</p><ol><li>Docker-compose (via docker hub)</li><li>systemd</li><li>Docker 编译</li></ol><h2 id="是否要使用-nginx" tabindex="-1">是否要使用 Nginx？ <a class="header-anchor" href="#是否要使用-nginx" aria-label="Permalink to &quot;是否要使用 Nginx？&quot;">​</a></h2><p>如果您想仅用一台服务器搭建 Ocean，我们推荐使用 nginx。</p><p>如果您想配置负载均衡器，推荐不要使用 Nginx。 可以参考<a href="https://github.com/ocean-dev/ocean/blob/develop/docs/examples/ocean.nginx" target="_blank" rel="noreferrer">Oceanのnginx設定</a>来设置负载均衡器。</p><h2 id="swap-分区" tabindex="-1">SWAP 分区 <a class="header-anchor" href="#swap-分区" aria-label="Permalink to &quot;SWAP 分区&quot;">​</a></h2><p>如果您设置了SWAP，除非您的总内存为 3GB 或更多，否则该脚本将无法运行。</p><h2 id="如果在途中失败并再次运行脚本" tabindex="-1">如果在途中失败并再次运行脚本 <a class="header-anchor" href="#如果在途中失败并再次运行脚本" aria-label="Permalink to &quot;如果在途中失败并再次运行脚本&quot;">​</a></h2><p>如果中途失败后再次运行脚本，请注意以下事项：</p><ul><li>如果您已经安装了 Redis 或 Postgres，请将“Install locally” 设置为 No。 保持主机名和端口设置不变，然后按 Enter。输入上次执行命令时指定的用户名和密码。</li></ul><h2 id="关于-env-文件" tabindex="-1">关于 .env 文件 <a class="header-anchor" href="#关于-env-文件" aria-label="Permalink to &quot;关于 .env 文件&quot;">​</a></h2><p>安装脚本创建了几个 .env 文件，这些文件在更新时有用。</p><h3 id="root-ocean-env" tabindex="-1">/root/.ocean.env <a class="header-anchor" href="#root-ocean-env" aria-label="Permalink to &quot;/root/.ocean.env&quot;">​</a></h3><p>记住运行 Ocean 的用户。</p><h3 id="home-oceanユーザー-ocean-env" tabindex="-1">/home/(oceanユーザー)/.ocean.env <a class="header-anchor" href="#home-oceanユーザー-ocean-env" aria-label="Permalink to &quot;/home/(oceanユーザー)/.ocean.env&quot;">​</a></h3><p>由 systemd 生成，主要用来记录运行目录。</p><h3 id="home-oceanユーザー-ocean-docker-env" tabindex="-1">/home/(oceanユーザー)/.ocean-docker.env <a class="header-anchor" href="#home-oceanユーザー-ocean-docker-env" aria-label="Permalink to &quot;/home/(oceanユーザー)/.ocean-docker.env&quot;">​</a></h3><p>由 Docker 生成，其中存储有正在运行的容器和映像的编号。 容器编号随着更新而更新，更新后，旧的映像会被删除。</p><h2 id="自行更改配置文档" tabindex="-1">自行更改配置文档 <a class="header-anchor" href="#自行更改配置文档" aria-label="Permalink to &quot;自行更改配置文档&quot;">​</a></h2><p>在安装结束后，您可以自行探索本项目的配置文档，并依据自身情况进行修改。</p><h3 id="ocean-安装目录-该部分为机翻" tabindex="-1">Ocean 安装目录 （该部分为机翻） <a class="header-anchor" href="#ocean-安装目录-该部分为机翻" aria-label="Permalink to &quot;Ocean 安装目录 （该部分为机翻）&quot;">​</a></h3><p>Ocean的源代码会被克隆到 /home/user/dictionary 中。 （user和dictionary的默认值都是ocean。）</p><p>若要访问 Ocean 的安装目录，建议使用以下命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">sudo -iu user</span></span>
<span class="line"><span style="color:#e1e4e8;">cd dictionary</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">sudo -iu user</span></span>
<span class="line"><span style="color:#24292e;">cd dictionary</span></span></code></pre></div><p>要返回之前的用户，执行以下命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">exit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">exit</span></span></code></pre></div><h3 id="systemd-中的-ocean-仅限使用一键安装脚本安装的-ocean" tabindex="-1">systemd 中的 Ocean （仅限使用一键安装脚本安装的 Ocean） <a class="header-anchor" href="#systemd-中的-ocean-仅限使用一键安装脚本安装的-ocean" aria-label="Permalink to &quot;systemd 中的 Ocean （仅限使用一键安装脚本安装的 Ocean）&quot;">​</a></h3><p>Ocean 在 systemd 中的进程名称为您设定的域名（例如，exmaple.com，仅限使用一键安装脚本安装的 Ocean）<br> 若要重启 Ocean，执行以下命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">sudo systemctl restart example.com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">sudo systemctl restart example.com</span></span></code></pre></div><p>可以使用 journalctl 查看日志：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">journalctl -t example.com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">journalctl -t example.com</span></span></code></pre></div><p>systemd的配置文件为：<code>/etc/systemd/system/example.com.service</code></p><h3 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h3><p>Docker 让 Ocean 以第三者用户运行</p><p>如果要使用sudo进入Ocean用户，则需要更改XDG_RUNTIME_DIR和DOCKER_HOST。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">sudo -iu user</span></span>
<span class="line"><span style="color:#e1e4e8;">export XDG_RUNTIME_DIR=/run/user/$UID</span></span>
<span class="line"><span style="color:#e1e4e8;">export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># 显示进程列表</span></span>
<span class="line"><span style="color:#e1e4e8;">docker ps</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># 编译（仓库: local/ocean:latest)</span></span>
<span class="line"><span style="color:#e1e4e8;">docker build -t local/ocean:latest ./ocean</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># docker run</span></span>
<span class="line"><span style="color:#e1e4e8;">docker run -d -p 3000:3000 --add-host=docker_host:10.0.0.1 -v /home/ocean/ocean/files:/ocean/files -v &quot;/home/ocean/ocean/.config/default.yml&quot;:/ocean/.config/default.yml:ro --restart unless-stopped -t &quot;local/ocean:latest&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># 显示日志</span></span>
<span class="line"><span style="color:#e1e4e8;">docker logs --tail 50 -f 容器ID</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">sudo -iu user</span></span>
<span class="line"><span style="color:#24292e;">export XDG_RUNTIME_DIR=/run/user/$UID</span></span>
<span class="line"><span style="color:#24292e;">export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># 显示进程列表</span></span>
<span class="line"><span style="color:#24292e;">docker ps</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># 编译（仓库: local/ocean:latest)</span></span>
<span class="line"><span style="color:#24292e;">docker build -t local/ocean:latest ./ocean</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># docker run</span></span>
<span class="line"><span style="color:#24292e;">docker run -d -p 3000:3000 --add-host=docker_host:10.0.0.1 -v /home/ocean/ocean/files:/ocean/files -v &quot;/home/ocean/ocean/.config/default.yml&quot;:/ocean/.config/default.yml:ro --restart unless-stopped -t &quot;local/ocean:latest&quot;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># 显示日志</span></span>
<span class="line"><span style="color:#24292e;">docker logs --tail 50 -f 容器ID</span></span></code></pre></div><p>下面的命令为上面的命令们的结合体（除了显示日志）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">sudo -u user XDG_RUNTIME_DIR=/run/user/$(id -u user) DOCKER_HOST=unix:///run/user/$(id -u user)/docker.sock docker ps</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">sudo -u user XDG_RUNTIME_DIR=/run/user/$(id -u user) DOCKER_HOST=unix:///run/user/$(id -u user)/docker.sock docker ps</span></span></code></pre></div><h3 id="nginx" tabindex="-1">nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;nginx&quot;">​</a></h3><p>Nginx 站点配置文档为：<code>/etc/nginx/conf.d/example.com.conf</code></p><h3 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h3><p>已经在 <code>/etc/redis/ocean.conf</code> 设定了requirepass 与 bind。</p><h2 id="升级实例后出现-502-无法访问错误" tabindex="-1">升级实例后出现 502 无法访问错误 <a class="header-anchor" href="#升级实例后出现-502-无法访问错误" aria-label="Permalink to &quot;升级实例后出现 502 无法访问错误&quot;">​</a></h2><p>如果使用 Docker，由于升级需要进行迁移，所以无法立即访问。请检查迁移是否完成。</p><p>如果使用 systemd，可能会出现 pnpm install 运行失败的情况：</p><p>在 Ocean 的安装目录中运行以下命令，并再次尝试进行更新。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">pnpm run clean-all</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">pnpm run clean-all</span></span></code></pre></div><p>如果查看 journalctl 日志，通常会看到有关re2的记录。</p><h2 id="可以在同一台服务器上再建立一个ocean实例吗" tabindex="-1">可以在同一台服务器上再建立一个Ocean实例吗？ <a class="header-anchor" href="#可以在同一台服务器上再建立一个ocean实例吗" aria-label="Permalink to &quot;可以在同一台服务器上再建立一个Ocean实例吗？&quot;">​</a></h2><p>一键安装脚本不适用于在同一台服务器上安装另一个Ocean实例。因为某些设置可能会被覆盖，或者在过程中可能会发生错误。</p>`,94),c=[l];function t(p,r,i,d,u,h){return a(),s("div",null,c)}const k=e(o,[["render",t]]);export{g as __pageData,k as default};
